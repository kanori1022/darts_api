name: Deploy to ECS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: ecs-deploy-main
  cancel-in-progress: true

env:
  AWS_REGION: ap-northeast-1
  AWS_ACCOUNT_ID: "248612013161"
  ECR_REPOSITORY: darts_api
  ECS_CLUSTER_NAME: darts_api
  ECS_SERVICE_NAME: darts_api_task_definition-service-69mkaqef
  ECS_TASK_FAMILY: darts_api_task_definition
  IMAGE_TAG_LATEST: latest

jobs:
  deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up QEMU (for cross-architecture builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set image tags
        id: vars
        run: |
          SHORT_SHA="${GITHUB_SHA::12}"
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "image_uri=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "image_uri_latest=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG_LATEST }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image (linux/arm64)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: |
            ${{ steps.vars.outputs.image_uri }}
            ${{ steps.vars.outputs.image_uri_latest }}

      - name: Fetch current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ env.ECS_TASK_FAMILY }}" \
            --query 'taskDefinition' \
            > taskdef.json

      - name: Render new task definition with updated image
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          cat taskdef.json \
            | jq 'del(.taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .revision, .status)' \
            | jq --arg IMAGE "${{ steps.vars.outputs.image_uri }}" '
                .containerDefinitions = (.containerDefinitions | map(.image = $IMAGE))
              ' \
            > taskdef-rendered.json
          echo "Rendered task definition:" && cat taskdef-rendered.json

      - name: Register new task definition revision
        id: register
        run: |
          NEW_TD=$(aws ecs register-task-definition --cli-input-json file://taskdef-rendered.json)
          echo "$NEW_TD" > taskdef-register-out.json
          NEW_TD_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' taskdef-register-out.json)
          echo "task_definition_arn=$NEW_TD_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service to new task definition
        run: |
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER_NAME }}" \
            --service "${{ env.ECS_SERVICE_NAME }}" \
            --task-definition "${{ steps.register.outputs.task_definition_arn }}" \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster "${{ env.ECS_CLUSTER_NAME }}" \
            --services "${{ env.ECS_SERVICE_NAME }}"

      - name: Output deployed image
        run: |
          echo "Deployed image: ${{ steps.vars.outputs.image_uri }}"
